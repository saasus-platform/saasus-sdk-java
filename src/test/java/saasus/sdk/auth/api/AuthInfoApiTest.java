/*
 * SaaSus Auth API Schema
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package saasus.sdk.auth.api;

import saasus.sdk.auth.ApiException;
import saasus.sdk.auth.models.AuthInfo;
import saasus.sdk.auth.models.Error;
import saasus.sdk.auth.models.IdentityProviders;
import saasus.sdk.auth.models.SignInSettings;
import saasus.sdk.auth.models.UpdateIdentityProviderParam;
import saasus.sdk.auth.models.UpdateSignInSettingsParam;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthInfoApi
 */
@Disabled
public class AuthInfoApiTest {

    private final AuthInfoApi api = new AuthInfoApi();

    /**
     * Get Authentication Info
     *
     * Get the post-login SaaS URL that contains authentication information. You can pass authentication information to the URL obtained here and implement this Callback using the SaaSus SDK. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthInfoTest() throws ApiException {
        AuthInfo response = api.getAuthInfo();
        // TODO: test validations
    }

    /**
     * Get Sign-In Information Via External Provider
     *
     * Get sign-in information via external provider set in cognito. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIdentityProvidersTest() throws ApiException {
        IdentityProviders response = api.getIdentityProviders();
        // TODO: test validations
    }

    /**
     * Get Password Requirements
     *
     * Get user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSignInSettingsTest() throws ApiException {
        SignInSettings response = api.getSignInSettings();
        // TODO: test validations
    }

    /**
     * Update Authentication Info
     *
     * Register post-login SaaS URL for authentication information. It is possible to pass authentication information to the URL registered here and implement this Callback using the SaaSus SDK. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAuthInfoTest() throws ApiException {
        AuthInfo body = null;
        api.updateAuthInfo(body);
        // TODO: test validations
    }

    /**
     * Update Sign-In Information
     *
     * Update the sign-in information for the external ID provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdentityProviderTest() throws ApiException {
        UpdateIdentityProviderParam updateIdentityProviderParam = null;
        api.updateIdentityProvider(updateIdentityProviderParam);
        // TODO: test validations
    }

    /**
     * Update Password Requirements
     *
     * Update user password requirements. Set a secure password that is difficult to decipher by increasing the number of digits by combining alphabets, numbers, and symbols. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSignInSettingsTest() throws ApiException {
        UpdateSignInSettingsParam updateSignInSettingsParam = null;
        api.updateSignInSettings(updateSignInSettingsParam);
        // TODO: test validations
    }

}
