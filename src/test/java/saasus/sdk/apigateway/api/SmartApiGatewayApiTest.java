/*
 * SaaSus Smart API Gateway API Schema
 * SaaSus Smart API Gateway API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package saasus.sdk.apigateway.api;

import saasus.sdk.apigateway.ApiException;
import saasus.sdk.apigateway.models.ApiGatewayInputFile;
import saasus.sdk.apigateway.models.ApiGatewaySettings;
import saasus.sdk.apigateway.models.ApiGatewayTenant;
import saasus.sdk.apigateway.models.ApiKey;
import saasus.sdk.apigateway.models.ApiKeys;
import saasus.sdk.apigateway.models.CloudFormationLaunchStackLink;
import saasus.sdk.apigateway.models.CreateApiKeyParam;
import saasus.sdk.apigateway.models.DraftApiGatewaySettings;
import saasus.sdk.apigateway.models.Error;
import saasus.sdk.apigateway.models.UpdateApiGatewaySettingsParam;
import saasus.sdk.apigateway.models.UpdateOpenApiDefinitionParam;
import saasus.sdk.apigateway.models.UpdateTenantParam;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmartApiGatewayApi
 */
@Disabled
public class SmartApiGatewayApiTest {

    private final SmartApiGatewayApi api = new SmartApiGatewayApi();

    /**
     * Apply draft configuration information for Smart API Gateway function
     *
     * Apply draft configuration information for Smart API Gateway function. This applies the changes made in the draft settings to the actual Smart API Gateway. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyDraftApiGatewaySettingsTest() throws ApiException {
        api.applyDraftApiGatewaySettings();
        // TODO: test validations
    }

    /**
     * Create the API Gateway
     *
     * Create the API Gateway. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiGatewayTest() throws ApiException {
        api.createApiGateway();
        // TODO: test validations
    }

    /**
     * Create an API key
     *
     * Creates or updates an API key based on the contents of the request body. All parameters are in the request body: - tenant_id, env_id (required) - user_id (optional) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        CreateApiKeyParam createApiKeyParam = null;
        ApiKey response = api.createApiKey(createApiKeyParam);
        // TODO: test validations
    }

    /**
     * Obtain configuration information for api gateway function
     *
     * Obtain configuration information for api gateway function. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiGatewaySettingsTest() throws ApiException {
        ApiGatewaySettings response = api.getApiGatewaySettings();
        // TODO: test validations
    }

    /**
     * get API key details by API key
     *
     * Get the details of the API key by specifying the API key. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeyTest() throws ApiException {
        String apiKey = null;
        ApiKey response = api.getApiKey(apiKey);
        // TODO: test validations
    }

    /**
     * API key list or get API key by condition
     *
     * The response content changes based on the combination of parameters tenant_id, env_id, and user_id. - If tenant_id is not specified, the full list is returned. - If only tenant_id is specified, the API keys within that tenant are returned. - If tenant_id and env_id are specified, the keys are filtered by the environment. - If tenant_id, env_id, and user_id are specified, a complete match returns the API keys for the target user. - Additionally, searching is supported even when only env_id or only user_id are provided. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeysTest() throws ApiException {
        String tenantId = null;
        Integer envId = null;
        String userId = null;
        Boolean tenantOnly = null;
        ApiKeys response = api.getApiKeys(tenantId, envId, userId, tenantOnly);
        // TODO: test validations
    }

    /**
     * Get the link to create the AWS CloudFormation stack
     *
     * Get the CloudFormation Quick Create link. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFormationLaunchStackLinkTest() throws ApiException {
        CloudFormationLaunchStackLink response = api.getCloudFormationLaunchStackLink();
        // TODO: test validations
    }

    /**
     * Obtain draft configuration information for Smart API Gateway function
     *
     * Obtain draft configuration information for Smart API Gateway function. You can check the settings generated from the uploaded source code before applying them. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDraftApiGatewaySettingsTest() throws ApiException {
        DraftApiGatewaySettings response = api.getDraftApiGatewaySettings();
        // TODO: test validations
    }

    /**
     * Get tenant information
     *
     * Get tenant information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantTest() throws ApiException {
        String tenantId = null;
        ApiGatewayTenant response = api.getTenant(tenantId);
        // TODO: test validations
    }

    /**
     * Publish the API Gateway
     *
     * Publish the API Gateway. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishApiGatewayTest() throws ApiException {
        api.publishApiGateway();
        // TODO: test validations
    }

    /**
     * Update the client secret of the API key
     *
     * Update the client secret of the API key. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshClientSecretTest() throws ApiException {
        String apiKey = null;
        ApiKey response = api.refreshClientSecret(apiKey);
        // TODO: test validations
    }

    /**
     * Unpublish the API Gateway
     *
     * Unpublish the API Gateway. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpublishApiGatewayTest() throws ApiException {
        api.unpublishApiGateway();
        // TODO: test validations
    }

    /**
     * Update configuration information for api gateway function
     *
     * Update configuration information for api gateway function. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiGatewaySettingsTest() throws ApiException {
        UpdateApiGatewaySettingsParam updateApiGatewaySettingsParam = null;
        api.updateApiGatewaySettings(updateApiGatewaySettingsParam);
        // TODO: test validations
    }

    /**
     * Update OpenAPI definition file
     *
     * Update OpenAPI definition file. The OpenAPI definition file is used for automatically generated documentation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOpenApiDefinitionTest() throws ApiException {
        UpdateOpenApiDefinitionParam updateOpenApiDefinitionParam = null;
        api.updateOpenApiDefinition(updateOpenApiDefinitionParam);
        // TODO: test validations
    }

    /**
     * Update tenant information
     *
     * Update tenant information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTenantTest() throws ApiException {
        String tenantId = null;
        UpdateTenantParam updateTenantParam = null;
        api.updateTenant(tenantId, updateTenantParam);
        // TODO: test validations
    }

    /**
     * Upload files to create an API Gateway
     *
     * Upload files to create an API Gateway 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadGenerationFilesTest() throws ApiException {
        ApiGatewayInputFile apiGatewayInputFile = null;
        api.uploadGenerationFiles(apiGatewayInputFile);
        // TODO: test validations
    }

}
