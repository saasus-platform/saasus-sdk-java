/*
 * SaaSus Pricing API Schema
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package saasus.sdk.pricing.api;

import saasus.sdk.pricing.ApiCallback;
import saasus.sdk.pricing.ApiClient;
import saasus.sdk.pricing.ApiException;
import saasus.sdk.pricing.ApiResponse;
import saasus.sdk.pricing.Configuration;
import saasus.sdk.pricing.Pair;
import saasus.sdk.pricing.ProgressRequestBody;
import saasus.sdk.pricing.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import saasus.sdk.pricing.models.Error;
import saasus.sdk.pricing.models.MeteringUnitDateCount;
import saasus.sdk.pricing.models.MeteringUnitDateCounts;
import saasus.sdk.pricing.models.MeteringUnitDatePeriodCounts;
import saasus.sdk.pricing.models.MeteringUnitMonthCount;
import saasus.sdk.pricing.models.MeteringUnitMonthCounts;
import saasus.sdk.pricing.models.MeteringUnitTimestampCount;
import saasus.sdk.pricing.models.UpdateMeteringUnitTimestampCountNowParam;
import saasus.sdk.pricing.models.UpdateMeteringUnitTimestampCountParam;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeteringApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeteringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeteringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteMeteringUnitTimestampCount
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMeteringUnitTimestampCountCall(String tenantId, String meteringUnitName, Integer timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()))
            .replace("{" + "timestamp" + "}", localVarApiClient.escapeString(timestamp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeteringUnitTimestampCountValidateBeforeCall(String tenantId, String meteringUnitName, Integer timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteMeteringUnitTimestampCount(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling deleteMeteringUnitTimestampCount(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling deleteMeteringUnitTimestampCount(Async)");
        }

        return deleteMeteringUnitTimestampCountCall(tenantId, meteringUnitName, timestamp, _callback);

    }

    /**
     * 指定したタイムスタンプのメータリングユニットカウントを削除(Delete Metering Uunit Count for Specified Timestamp)
     * 指定したタイムスタンプのメータリングユニットカウントを削除します。  Deletes metering unit count for the specified timestamp. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMeteringUnitTimestampCount(String tenantId, String meteringUnitName, Integer timestamp) throws ApiException {
        deleteMeteringUnitTimestampCountWithHttpInfo(tenantId, meteringUnitName, timestamp);
    }

    /**
     * 指定したタイムスタンプのメータリングユニットカウントを削除(Delete Metering Uunit Count for Specified Timestamp)
     * 指定したタイムスタンプのメータリングユニットカウントを削除します。  Deletes metering unit count for the specified timestamp. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMeteringUnitTimestampCountWithHttpInfo(String tenantId, String meteringUnitName, Integer timestamp) throws ApiException {
        okhttp3.Call localVarCall = deleteMeteringUnitTimestampCountValidateBeforeCall(tenantId, meteringUnitName, timestamp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 指定したタイムスタンプのメータリングユニットカウントを削除(Delete Metering Uunit Count for Specified Timestamp) (asynchronously)
     * 指定したタイムスタンプのメータリングユニットカウントを削除します。  Deletes metering unit count for the specified timestamp. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMeteringUnitTimestampCountAsync(String tenantId, String meteringUnitName, Integer timestamp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeteringUnitTimestampCountValidateBeforeCall(tenantId, meteringUnitName, timestamp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeteringUnitDateCountByTenantIdAndUnitNameAndDate
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param date 日(date) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameAndDateCall(String tenantId, String meteringUnitName, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameAndDateValidateBeforeCall(String tenantId, String meteringUnitName, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(Async)");
        }

        return getMeteringUnitDateCountByTenantIdAndUnitNameAndDateCall(tenantId, meteringUnitName, date, _callback);

    }

    /**
     * 指定した日付のメータリングユニットカウントを取得(Get Metering Unit Count for Specific Date)
     * 指定した日付のメータリングユニットカウントを取得します。  Gets the metering unit count for specific date. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param date 日(date) (required)
     * @return MeteringUnitDateCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitDateCount getMeteringUnitDateCountByTenantIdAndUnitNameAndDate(String tenantId, String meteringUnitName, String date) throws ApiException {
        ApiResponse<MeteringUnitDateCount> localVarResp = getMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfo(tenantId, meteringUnitName, date);
        return localVarResp.getData();
    }

    /**
     * 指定した日付のメータリングユニットカウントを取得(Get Metering Unit Count for Specific Date)
     * 指定した日付のメータリングユニットカウントを取得します。  Gets the metering unit count for specific date. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param date 日(date) (required)
     * @return ApiResponse&lt;MeteringUnitDateCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitDateCount> getMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfo(String tenantId, String meteringUnitName, String date) throws ApiException {
        okhttp3.Call localVarCall = getMeteringUnitDateCountByTenantIdAndUnitNameAndDateValidateBeforeCall(tenantId, meteringUnitName, date, null);
        Type localVarReturnType = new TypeToken<MeteringUnitDateCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定した日付のメータリングユニットカウントを取得(Get Metering Unit Count for Specific Date) (asynchronously)
     * 指定した日付のメータリングユニットカウントを取得します。  Gets the metering unit count for specific date. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param date 日(date) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameAndDateAsync(String tenantId, String meteringUnitName, String date, final ApiCallback<MeteringUnitDateCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeteringUnitDateCountByTenantIdAndUnitNameAndDateValidateBeforeCall(tenantId, meteringUnitName, date, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitDateCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param startTimestamp 開始日時(timestamp) (optional)
     * @param endTimestamp 終了日時(timestamp) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodCall(String tenantId, String meteringUnitName, Integer startTimestamp, Integer endTimestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/date-period"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_timestamp", startTimestamp));
        }

        if (endTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_timestamp", endTimestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodValidateBeforeCall(String tenantId, String meteringUnitName, Integer startTimestamp, Integer endTimestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(Async)");
        }

        return getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodCall(tenantId, meteringUnitName, startTimestamp, endTimestamp, _callback);

    }

    /**
     * 指定した日時期間のメータリングユニットカウントを取得(Obtain metering unit counts for a specified date/time period)
     * 指定した日時期間のメータリングユニットカウントを取得します。  Obtain metering unit counts for a specified date/time period. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param startTimestamp 開始日時(timestamp) (optional)
     * @param endTimestamp 終了日時(timestamp) (optional)
     * @return MeteringUnitDatePeriodCounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitDatePeriodCounts getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(String tenantId, String meteringUnitName, Integer startTimestamp, Integer endTimestamp) throws ApiException {
        ApiResponse<MeteringUnitDatePeriodCounts> localVarResp = getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfo(tenantId, meteringUnitName, startTimestamp, endTimestamp);
        return localVarResp.getData();
    }

    /**
     * 指定した日時期間のメータリングユニットカウントを取得(Obtain metering unit counts for a specified date/time period)
     * 指定した日時期間のメータリングユニットカウントを取得します。  Obtain metering unit counts for a specified date/time period. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param startTimestamp 開始日時(timestamp) (optional)
     * @param endTimestamp 終了日時(timestamp) (optional)
     * @return ApiResponse&lt;MeteringUnitDatePeriodCounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitDatePeriodCounts> getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfo(String tenantId, String meteringUnitName, Integer startTimestamp, Integer endTimestamp) throws ApiException {
        okhttp3.Call localVarCall = getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodValidateBeforeCall(tenantId, meteringUnitName, startTimestamp, endTimestamp, null);
        Type localVarReturnType = new TypeToken<MeteringUnitDatePeriodCounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定した日時期間のメータリングユニットカウントを取得(Obtain metering unit counts for a specified date/time period) (asynchronously)
     * 指定した日時期間のメータリングユニットカウントを取得します。  Obtain metering unit counts for a specified date/time period. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param startTimestamp 開始日時(timestamp) (optional)
     * @param endTimestamp 終了日時(timestamp) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodAsync(String tenantId, String meteringUnitName, Integer startTimestamp, Integer endTimestamp, final ApiCallback<MeteringUnitDatePeriodCounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodValidateBeforeCall(tenantId, meteringUnitName, startTimestamp, endTimestamp, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitDatePeriodCounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeteringUnitDateCountByTenantIdAndUnitNameToday
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameTodayCall(String tenantId, String meteringUnitName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/today"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameTodayValidateBeforeCall(String tenantId, String meteringUnitName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getMeteringUnitDateCountByTenantIdAndUnitNameToday(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling getMeteringUnitDateCountByTenantIdAndUnitNameToday(Async)");
        }

        return getMeteringUnitDateCountByTenantIdAndUnitNameTodayCall(tenantId, meteringUnitName, _callback);

    }

    /**
     * 当日のメータリングユニットカウントを取得(Get Metering Unit Count for the Current Day)
     * 当日のメータリングユニットカウントを取得します。  Get the metering unit count for the current day. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @return MeteringUnitDateCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitDateCount getMeteringUnitDateCountByTenantIdAndUnitNameToday(String tenantId, String meteringUnitName) throws ApiException {
        ApiResponse<MeteringUnitDateCount> localVarResp = getMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfo(tenantId, meteringUnitName);
        return localVarResp.getData();
    }

    /**
     * 当日のメータリングユニットカウントを取得(Get Metering Unit Count for the Current Day)
     * 当日のメータリングユニットカウントを取得します。  Get the metering unit count for the current day. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @return ApiResponse&lt;MeteringUnitDateCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitDateCount> getMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfo(String tenantId, String meteringUnitName) throws ApiException {
        okhttp3.Call localVarCall = getMeteringUnitDateCountByTenantIdAndUnitNameTodayValidateBeforeCall(tenantId, meteringUnitName, null);
        Type localVarReturnType = new TypeToken<MeteringUnitDateCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 当日のメータリングユニットカウントを取得(Get Metering Unit Count for the Current Day) (asynchronously)
     * 当日のメータリングユニットカウントを取得します。  Get the metering unit count for the current day. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountByTenantIdAndUnitNameTodayAsync(String tenantId, String meteringUnitName, final ApiCallback<MeteringUnitDateCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeteringUnitDateCountByTenantIdAndUnitNameTodayValidateBeforeCall(tenantId, meteringUnitName, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitDateCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeteringUnitDateCountsByTenantIdAndDate
     * @param tenantId テナントID(tenant id) (required)
     * @param date 日(date) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountsByTenantIdAndDateCall(String tenantId, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/date/{date}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeteringUnitDateCountsByTenantIdAndDateValidateBeforeCall(String tenantId, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getMeteringUnitDateCountsByTenantIdAndDate(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getMeteringUnitDateCountsByTenantIdAndDate(Async)");
        }

        return getMeteringUnitDateCountsByTenantIdAndDateCall(tenantId, date, _callback);

    }

    /**
     * 指定日の全メータリングユニットカウントを取得(Get All Metering Unit Counts for a Specified Date)
     * 指定した日の全メータリングユニットカウントを取得します。  Gets the total metering unit count for the specified date. 
     * @param tenantId テナントID(tenant id) (required)
     * @param date 日(date) (required)
     * @return MeteringUnitDateCounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitDateCounts getMeteringUnitDateCountsByTenantIdAndDate(String tenantId, String date) throws ApiException {
        ApiResponse<MeteringUnitDateCounts> localVarResp = getMeteringUnitDateCountsByTenantIdAndDateWithHttpInfo(tenantId, date);
        return localVarResp.getData();
    }

    /**
     * 指定日の全メータリングユニットカウントを取得(Get All Metering Unit Counts for a Specified Date)
     * 指定した日の全メータリングユニットカウントを取得します。  Gets the total metering unit count for the specified date. 
     * @param tenantId テナントID(tenant id) (required)
     * @param date 日(date) (required)
     * @return ApiResponse&lt;MeteringUnitDateCounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitDateCounts> getMeteringUnitDateCountsByTenantIdAndDateWithHttpInfo(String tenantId, String date) throws ApiException {
        okhttp3.Call localVarCall = getMeteringUnitDateCountsByTenantIdAndDateValidateBeforeCall(tenantId, date, null);
        Type localVarReturnType = new TypeToken<MeteringUnitDateCounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定日の全メータリングユニットカウントを取得(Get All Metering Unit Counts for a Specified Date) (asynchronously)
     * 指定した日の全メータリングユニットカウントを取得します。  Gets the total metering unit count for the specified date. 
     * @param tenantId テナントID(tenant id) (required)
     * @param date 日(date) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitDateCountsByTenantIdAndDateAsync(String tenantId, String date, final ApiCallback<MeteringUnitDateCounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeteringUnitDateCountsByTenantIdAndDateValidateBeforeCall(tenantId, date, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitDateCounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param month 月(month) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthCall(String tenantId, String meteringUnitName, String month, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/month/{month}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthValidateBeforeCall(String tenantId, String meteringUnitName, String month, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(Async)");
        }

        return getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthCall(tenantId, meteringUnitName, month, _callback);

    }

    /**
     * 指定月のメータリングユニットカウントを取得(Get the Metering Unit Count for the Specified Month)
     * 指定した月のメータリングユニットカウントを取得します。  Gets the metering unit count for the specified month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param month 月(month) (required)
     * @return MeteringUnitMonthCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitMonthCount getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(String tenantId, String meteringUnitName, String month) throws ApiException {
        ApiResponse<MeteringUnitMonthCount> localVarResp = getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfo(tenantId, meteringUnitName, month);
        return localVarResp.getData();
    }

    /**
     * 指定月のメータリングユニットカウントを取得(Get the Metering Unit Count for the Specified Month)
     * 指定した月のメータリングユニットカウントを取得します。  Gets the metering unit count for the specified month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param month 月(month) (required)
     * @return ApiResponse&lt;MeteringUnitMonthCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitMonthCount> getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfo(String tenantId, String meteringUnitName, String month) throws ApiException {
        okhttp3.Call localVarCall = getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthValidateBeforeCall(tenantId, meteringUnitName, month, null);
        Type localVarReturnType = new TypeToken<MeteringUnitMonthCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定月のメータリングユニットカウントを取得(Get the Metering Unit Count for the Specified Month) (asynchronously)
     * 指定した月のメータリングユニットカウントを取得します。  Gets the metering unit count for the specified month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param month 月(month) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthAsync(String tenantId, String meteringUnitName, String month, final ApiCallback<MeteringUnitMonthCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthValidateBeforeCall(tenantId, meteringUnitName, month, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitMonthCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthCall(String tenantId, String meteringUnitName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/thismonth"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthValidateBeforeCall(String tenantId, String meteringUnitName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(Async)");
        }

        return getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthCall(tenantId, meteringUnitName, _callback);

    }

    /**
     * 当月のメータリングユニットカウントを取得(Get Metering Unit Count for the Current Month)
     * 当月のメータリングユニットカウントを取得します。  Get the metering unit count for the current month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @return MeteringUnitMonthCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitMonthCount getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(String tenantId, String meteringUnitName) throws ApiException {
        ApiResponse<MeteringUnitMonthCount> localVarResp = getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfo(tenantId, meteringUnitName);
        return localVarResp.getData();
    }

    /**
     * 当月のメータリングユニットカウントを取得(Get Metering Unit Count for the Current Month)
     * 当月のメータリングユニットカウントを取得します。  Get the metering unit count for the current month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @return ApiResponse&lt;MeteringUnitMonthCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitMonthCount> getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfo(String tenantId, String meteringUnitName) throws ApiException {
        okhttp3.Call localVarCall = getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthValidateBeforeCall(tenantId, meteringUnitName, null);
        Type localVarReturnType = new TypeToken<MeteringUnitMonthCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 当月のメータリングユニットカウントを取得(Get Metering Unit Count for the Current Month) (asynchronously)
     * 当月のメータリングユニットカウントを取得します。  Get the metering unit count for the current month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthAsync(String tenantId, String meteringUnitName, final ApiCallback<MeteringUnitMonthCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthValidateBeforeCall(tenantId, meteringUnitName, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitMonthCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeteringUnitMonthCountsByTenantIdAndMonth
     * @param tenantId テナントID(tenant id) (required)
     * @param month 月(month) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitMonthCountsByTenantIdAndMonthCall(String tenantId, String month, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/month/{month}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeteringUnitMonthCountsByTenantIdAndMonthValidateBeforeCall(String tenantId, String month, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getMeteringUnitMonthCountsByTenantIdAndMonth(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getMeteringUnitMonthCountsByTenantIdAndMonth(Async)");
        }

        return getMeteringUnitMonthCountsByTenantIdAndMonthCall(tenantId, month, _callback);

    }

    /**
     * 指定月の全メータリングユニットカウントを取得(Get All Metering Unit Counts for the Specified Month)
     * 指定した月の全メータリングユニットカウントを取得します。  Gets all metering unit counts for the specified month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param month 月(month) (required)
     * @return MeteringUnitMonthCounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitMonthCounts getMeteringUnitMonthCountsByTenantIdAndMonth(String tenantId, String month) throws ApiException {
        ApiResponse<MeteringUnitMonthCounts> localVarResp = getMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfo(tenantId, month);
        return localVarResp.getData();
    }

    /**
     * 指定月の全メータリングユニットカウントを取得(Get All Metering Unit Counts for the Specified Month)
     * 指定した月の全メータリングユニットカウントを取得します。  Gets all metering unit counts for the specified month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param month 月(month) (required)
     * @return ApiResponse&lt;MeteringUnitMonthCounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitMonthCounts> getMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfo(String tenantId, String month) throws ApiException {
        okhttp3.Call localVarCall = getMeteringUnitMonthCountsByTenantIdAndMonthValidateBeforeCall(tenantId, month, null);
        Type localVarReturnType = new TypeToken<MeteringUnitMonthCounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定月の全メータリングユニットカウントを取得(Get All Metering Unit Counts for the Specified Month) (asynchronously)
     * 指定した月の全メータリングユニットカウントを取得します。  Gets all metering unit counts for the specified month. 
     * @param tenantId テナントID(tenant id) (required)
     * @param month 月(month) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMeteringUnitMonthCountsByTenantIdAndMonthAsync(String tenantId, String month, final ApiCallback<MeteringUnitMonthCounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeteringUnitMonthCountsByTenantIdAndMonthValidateBeforeCall(tenantId, month, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitMonthCounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeteringUnitTimestampCount
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @param updateMeteringUnitTimestampCountParam  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeteringUnitTimestampCountCall(String tenantId, String meteringUnitName, Integer timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMeteringUnitTimestampCountParam;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()))
            .replace("{" + "timestamp" + "}", localVarApiClient.escapeString(timestamp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeteringUnitTimestampCountValidateBeforeCall(String tenantId, String meteringUnitName, Integer timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateMeteringUnitTimestampCount(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling updateMeteringUnitTimestampCount(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling updateMeteringUnitTimestampCount(Async)");
        }

        return updateMeteringUnitTimestampCountCall(tenantId, meteringUnitName, timestamp, updateMeteringUnitTimestampCountParam, _callback);

    }

    /**
     * 指定したタイムスタンプのメータリングユニットカウントを更新(Update Metering Unit Count for Specified Timestamp)
     * 指定したタイムスタンプのメータリングユニットカウントを更新します。  Update metering unit count for the specified timestamp. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @param updateMeteringUnitTimestampCountParam  (optional)
     * @return MeteringUnitTimestampCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitTimestampCount updateMeteringUnitTimestampCount(String tenantId, String meteringUnitName, Integer timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam) throws ApiException {
        ApiResponse<MeteringUnitTimestampCount> localVarResp = updateMeteringUnitTimestampCountWithHttpInfo(tenantId, meteringUnitName, timestamp, updateMeteringUnitTimestampCountParam);
        return localVarResp.getData();
    }

    /**
     * 指定したタイムスタンプのメータリングユニットカウントを更新(Update Metering Unit Count for Specified Timestamp)
     * 指定したタイムスタンプのメータリングユニットカウントを更新します。  Update metering unit count for the specified timestamp. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @param updateMeteringUnitTimestampCountParam  (optional)
     * @return ApiResponse&lt;MeteringUnitTimestampCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitTimestampCount> updateMeteringUnitTimestampCountWithHttpInfo(String tenantId, String meteringUnitName, Integer timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam) throws ApiException {
        okhttp3.Call localVarCall = updateMeteringUnitTimestampCountValidateBeforeCall(tenantId, meteringUnitName, timestamp, updateMeteringUnitTimestampCountParam, null);
        Type localVarReturnType = new TypeToken<MeteringUnitTimestampCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 指定したタイムスタンプのメータリングユニットカウントを更新(Update Metering Unit Count for Specified Timestamp) (asynchronously)
     * 指定したタイムスタンプのメータリングユニットカウントを更新します。  Update metering unit count for the specified timestamp. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param timestamp タイムスタンプ(timestamp) (required)
     * @param updateMeteringUnitTimestampCountParam  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeteringUnitTimestampCountAsync(String tenantId, String meteringUnitName, Integer timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam, final ApiCallback<MeteringUnitTimestampCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeteringUnitTimestampCountValidateBeforeCall(tenantId, meteringUnitName, timestamp, updateMeteringUnitTimestampCountParam, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitTimestampCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMeteringUnitTimestampCountNow
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param updateMeteringUnitTimestampCountNowParam  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeteringUnitTimestampCountNowCall(String tenantId, String meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMeteringUnitTimestampCountNowParam;

        // create path and map variables
        String localVarPath = "/metering/tenants/{tenant_id}/units/{metering_unit_name}/now"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "metering_unit_name" + "}", localVarApiClient.escapeString(meteringUnitName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeteringUnitTimestampCountNowValidateBeforeCall(String tenantId, String meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateMeteringUnitTimestampCountNow(Async)");
        }

        // verify the required parameter 'meteringUnitName' is set
        if (meteringUnitName == null) {
            throw new ApiException("Missing the required parameter 'meteringUnitName' when calling updateMeteringUnitTimestampCountNow(Async)");
        }

        return updateMeteringUnitTimestampCountNowCall(tenantId, meteringUnitName, updateMeteringUnitTimestampCountNowParam, _callback);

    }

    /**
     * 現在時刻のメータリングユニットカウントを更新(Update Metering Unit Count for Current Time)
     * 現在時刻のメータリングユニットカウントを更新します。  Update the metering unit count for the current time. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param updateMeteringUnitTimestampCountNowParam  (optional)
     * @return MeteringUnitTimestampCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MeteringUnitTimestampCount updateMeteringUnitTimestampCountNow(String tenantId, String meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam) throws ApiException {
        ApiResponse<MeteringUnitTimestampCount> localVarResp = updateMeteringUnitTimestampCountNowWithHttpInfo(tenantId, meteringUnitName, updateMeteringUnitTimestampCountNowParam);
        return localVarResp.getData();
    }

    /**
     * 現在時刻のメータリングユニットカウントを更新(Update Metering Unit Count for Current Time)
     * 現在時刻のメータリングユニットカウントを更新します。  Update the metering unit count for the current time. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param updateMeteringUnitTimestampCountNowParam  (optional)
     * @return ApiResponse&lt;MeteringUnitTimestampCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MeteringUnitTimestampCount> updateMeteringUnitTimestampCountNowWithHttpInfo(String tenantId, String meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam) throws ApiException {
        okhttp3.Call localVarCall = updateMeteringUnitTimestampCountNowValidateBeforeCall(tenantId, meteringUnitName, updateMeteringUnitTimestampCountNowParam, null);
        Type localVarReturnType = new TypeToken<MeteringUnitTimestampCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 現在時刻のメータリングユニットカウントを更新(Update Metering Unit Count for Current Time) (asynchronously)
     * 現在時刻のメータリングユニットカウントを更新します。  Update the metering unit count for the current time. 
     * @param tenantId テナントID(tenant id) (required)
     * @param meteringUnitName 計測ユニット名(metering unit name) (required)
     * @param updateMeteringUnitTimestampCountNowParam  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeteringUnitTimestampCountNowAsync(String tenantId, String meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam, final ApiCallback<MeteringUnitTimestampCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeteringUnitTimestampCountNowValidateBeforeCall(tenantId, meteringUnitName, updateMeteringUnitTimestampCountNowParam, _callback);
        Type localVarReturnType = new TypeToken<MeteringUnitTimestampCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
