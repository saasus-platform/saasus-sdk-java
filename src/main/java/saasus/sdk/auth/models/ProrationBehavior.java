/*
 * SaaSus Auth API Schema
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package saasus.sdk.auth.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * stripe連携している場合で、プラン変更時の比例配分の挙動を設定できます。 プラン変更した場合に、請求金額を日割り計算し次回請求書に反映させるか、日割り計算した請求を即時に発行する、日割り計算をしないを設定できます。  If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans. When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all. 
 */
@JsonAdapter(ProrationBehavior.Adapter.class)
public enum ProrationBehavior {
  
  CREATE_PRORATIONS("create_prorations"),
  
  NONE("none"),
  
  ALWAYS_INVOICE("always_invoice");

  private String value;

  ProrationBehavior(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ProrationBehavior fromValue(String value) {
    for (ProrationBehavior b : ProrationBehavior.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ProrationBehavior> {
    @Override
    public void write(final JsonWriter jsonWriter, final ProrationBehavior enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ProrationBehavior read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ProrationBehavior.fromValue(value);
    }
  }
}

