/*
 * SaaSus ApiLog API Schema
 * SaaSus ApiLog API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package saasus.sdk.apilog.api;

import saasus.sdk.apilog.ApiCallback;
import saasus.sdk.apilog.ApiClient;
import saasus.sdk.apilog.ApiException;
import saasus.sdk.apilog.ApiResponse;
import saasus.sdk.apilog.Configuration;
import saasus.sdk.apilog.Pair;
import saasus.sdk.apilog.ProgressRequestBody;
import saasus.sdk.apilog.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import saasus.sdk.apilog.models.ApiLog;
import saasus.sdk.apilog.models.ApiLogs;
import saasus.sdk.apilog.models.Error;
import java.time.LocalDate;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiLogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiLogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiLogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getLog
     * @param apiLogId API Log ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogCall(String apiLogId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{api_log_id}"
            .replace("{" + "api_log_id" + "}", localVarApiClient.escapeString(apiLogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogValidateBeforeCall(String apiLogId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiLogId' is set
        if (apiLogId == null) {
            throw new ApiException("Missing the required parameter 'apiLogId' when calling getLog(Async)");
        }

        return getLogCall(apiLogId, _callback);

    }

    /**
     * Get API execution log
     * Retrieve the log of the API execution with the specified ID.
     * @param apiLogId API Log ID (required)
     * @return ApiLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiLog getLog(String apiLogId) throws ApiException {
        ApiResponse<ApiLog> localVarResp = getLogWithHttpInfo(apiLogId);
        return localVarResp.getData();
    }

    /**
     * Get API execution log
     * Retrieve the log of the API execution with the specified ID.
     * @param apiLogId API Log ID (required)
     * @return ApiResponse&lt;ApiLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiLog> getLogWithHttpInfo(String apiLogId) throws ApiException {
        okhttp3.Call localVarCall = getLogValidateBeforeCall(apiLogId, null);
        Type localVarReturnType = new TypeToken<ApiLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get API execution log (asynchronously)
     * Retrieve the log of the API execution with the specified ID.
     * @param apiLogId API Log ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogAsync(String apiLogId, final ApiCallback<ApiLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogValidateBeforeCall(apiLogId, _callback);
        Type localVarReturnType = new TypeToken<ApiLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLogs
     * @param createdDate The date, in format of YYYY-MM-DD, to retrieve the log. (optional)
     * @param createdAt The datetime, in ISO 8601 format, to retrieve the log. (optional)
     * @param limit Maximum number of logs to retrieve. (optional)
     * @param cursor Cursor for cursor pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogsCall(LocalDate createdDate, OffsetDateTime createdAt, Long limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_date", createdDate));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at", createdAt));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogsValidateBeforeCall(LocalDate createdDate, OffsetDateTime createdAt, Long limit, String cursor, final ApiCallback _callback) throws ApiException {
        return getLogsCall(createdDate, createdAt, limit, cursor, _callback);

    }

    /**
     * Get API execution log list
     * Retrieve the log of all API executions.
     * @param createdDate The date, in format of YYYY-MM-DD, to retrieve the log. (optional)
     * @param createdAt The datetime, in ISO 8601 format, to retrieve the log. (optional)
     * @param limit Maximum number of logs to retrieve. (optional)
     * @param cursor Cursor for cursor pagination. (optional)
     * @return ApiLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiLogs getLogs(LocalDate createdDate, OffsetDateTime createdAt, Long limit, String cursor) throws ApiException {
        ApiResponse<ApiLogs> localVarResp = getLogsWithHttpInfo(createdDate, createdAt, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * Get API execution log list
     * Retrieve the log of all API executions.
     * @param createdDate The date, in format of YYYY-MM-DD, to retrieve the log. (optional)
     * @param createdAt The datetime, in ISO 8601 format, to retrieve the log. (optional)
     * @param limit Maximum number of logs to retrieve. (optional)
     * @param cursor Cursor for cursor pagination. (optional)
     * @return ApiResponse&lt;ApiLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiLogs> getLogsWithHttpInfo(LocalDate createdDate, OffsetDateTime createdAt, Long limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getLogsValidateBeforeCall(createdDate, createdAt, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ApiLogs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get API execution log list (asynchronously)
     * Retrieve the log of all API executions.
     * @param createdDate The date, in format of YYYY-MM-DD, to retrieve the log. (optional)
     * @param createdAt The datetime, in ISO 8601 format, to retrieve the log. (optional)
     * @param limit Maximum number of logs to retrieve. (optional)
     * @param cursor Cursor for cursor pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogsAsync(LocalDate createdDate, OffsetDateTime createdAt, Long limit, String cursor, final ApiCallback<ApiLogs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogsValidateBeforeCall(createdDate, createdAt, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ApiLogs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
