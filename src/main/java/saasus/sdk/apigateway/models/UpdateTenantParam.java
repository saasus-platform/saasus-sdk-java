/*
 * SaaSus Smart API Gateway API Schema
 * SaaSus Smart API Gateway API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package saasus.sdk.apigateway.models;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import saasus.sdk.apigateway.JSON;

/**
 * UpdateTenantParam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-11T20:38:02.567875254Z[Etc/UTC]")
public class UpdateTenantParam {
  public static final String SERIALIZED_NAME_ROUTING = "routing";
  @SerializedName(SERIALIZED_NAME_ROUTING)
  private TenantRouting routing;

  public UpdateTenantParam() {
  }

  public UpdateTenantParam routing(TenantRouting routing) {
    this.routing = routing;
    return this;
  }

  /**
   * Get routing
   * 
   * @return routing
   **/
  @javax.annotation.Nullable
  public TenantRouting getRouting() {
    return routing;
  }

  public void setRouting(TenantRouting routing) {
    this.routing = routing;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTenantParam updateTenantParam = (UpdateTenantParam) o;
    return Objects.equals(this.routing, updateTenantParam.routing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(routing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTenantParam {\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("routing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to
   *                     UpdateTenantParam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!UpdateTenantParam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format("The required field(s) %s in UpdateTenantParam is not found in the empty JSON string",
                UpdateTenantParam.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!UpdateTenantParam.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format(
            "The field `%s` in the JSON string is not defined in the `UpdateTenantParam` properties. JSON: %s",
            entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the optional field `routing`
    if (jsonObj.get("routing") != null && !jsonObj.get("routing").isJsonNull()) {
      TenantRouting.validateJsonElement(jsonObj.get("routing"));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!UpdateTenantParam.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'UpdateTenantParam' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<UpdateTenantParam> thisAdapter = gson.getDelegateAdapter(this,
          TypeToken.get(UpdateTenantParam.class));

      return (TypeAdapter<T>) new TypeAdapter<UpdateTenantParam>() {
        @Override
        public void write(JsonWriter out, UpdateTenantParam value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public UpdateTenantParam read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }

      }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTenantParam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTenantParam
   * @throws IOException if the JSON string is invalid with respect to
   *                     UpdateTenantParam
   */
  public static UpdateTenantParam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTenantParam.class);
  }

  /**
   * Convert an instance of UpdateTenantParam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
