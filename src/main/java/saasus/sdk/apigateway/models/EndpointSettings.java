/*
 * SaaSus Smart API Gateway API Schema
 * SaaSus Smart API Gateway API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package saasus.sdk.apigateway.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import saasus.sdk.apigateway.models.Throttling;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import saasus.sdk.apigateway.JSON;

/**
 * Settings per endpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T00:29:00.145193009Z[Etc/UTC]")
public class EndpointSettings {
  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  /**
   * Method
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    GET("GET"),
    
    HEAD("HEAD"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    DELETE("DELETE"),
    
    CONNECT("CONNECT"),
    
    OPTIONS("OPTIONS"),
    
    TRACE("TRACE");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_THROTTLINGS = "throttlings";
  @SerializedName(SERIALIZED_NAME_THROTTLINGS)
  private List<Throttling> throttlings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLE_NAMES = "role_names";
  @SerializedName(SERIALIZED_NAME_ROLE_NAMES)
  private List<String> roleNames;

  public static final String SERIALIZED_NAME_MAPPING_ENDPOINT_ID = "mapping_endpoint_id";
  @SerializedName(SERIALIZED_NAME_MAPPING_ENDPOINT_ID)
  private String mappingEndpointId;

  public EndpointSettings() {
  }

  public EndpointSettings path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path
   * @return path
  **/
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public EndpointSettings method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * Method
   * @return method
  **/
  @javax.annotation.Nonnull
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public EndpointSettings throttlings(List<Throttling> throttlings) {
    this.throttlings = throttlings;
    return this;
  }

  public EndpointSettings addThrottlingsItem(Throttling throttlingsItem) {
    if (this.throttlings == null) {
      this.throttlings = new ArrayList<>();
    }
    this.throttlings.add(throttlingsItem);
    return this;
  }

   /**
   * Throttling settings for each target TODO: Make it possible to set multiple settings in the future 
   * @return throttlings
  **/
  @javax.annotation.Nonnull
  public List<Throttling> getThrottlings() {
    return throttlings;
  }

  public void setThrottlings(List<Throttling> throttlings) {
    this.throttlings = throttlings;
  }


  public EndpointSettings roleNames(List<String> roleNames) {
    this.roleNames = roleNames;
    return this;
  }

  public EndpointSettings addRoleNamesItem(String roleNamesItem) {
    if (this.roleNames == null) {
      this.roleNames = new ArrayList<>();
    }
    this.roleNames.add(roleNamesItem);
    return this;
  }

   /**
   * Role names that can access the endpoint
   * @return roleNames
  **/
  @javax.annotation.Nullable
  public List<String> getRoleNames() {
    return roleNames;
  }

  public void setRoleNames(List<String> roleNames) {
    this.roleNames = roleNames;
  }


  public EndpointSettings mappingEndpointId(String mappingEndpointId) {
    this.mappingEndpointId = mappingEndpointId;
    return this;
  }

   /**
   * Identifier for the function to be executed when calling the API
   * @return mappingEndpointId
  **/
  @javax.annotation.Nonnull
  public String getMappingEndpointId() {
    return mappingEndpointId;
  }

  public void setMappingEndpointId(String mappingEndpointId) {
    this.mappingEndpointId = mappingEndpointId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointSettings endpointSettings = (EndpointSettings) o;
    return Objects.equals(this.path, endpointSettings.path) &&
        Objects.equals(this.method, endpointSettings.method) &&
        Objects.equals(this.throttlings, endpointSettings.throttlings) &&
        Objects.equals(this.roleNames, endpointSettings.roleNames) &&
        Objects.equals(this.mappingEndpointId, endpointSettings.mappingEndpointId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, method, throttlings, roleNames, mappingEndpointId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointSettings {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    throttlings: ").append(toIndentedString(throttlings)).append("\n");
    sb.append("    roleNames: ").append(toIndentedString(roleNames)).append("\n");
    sb.append("    mappingEndpointId: ").append(toIndentedString(mappingEndpointId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("path");
    openapiFields.add("method");
    openapiFields.add("throttlings");
    openapiFields.add("role_names");
    openapiFields.add("mapping_endpoint_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("throttlings");
    openapiRequiredFields.add("mapping_endpoint_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EndpointSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointSettings is not found in the empty JSON string", EndpointSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EndpointSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the required field `method`
      MethodEnum.validateJsonElement(jsonObj.get("method"));
      // ensure the json data is an array
      if (!jsonObj.get("throttlings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `throttlings` to be an array in the JSON string but got `%s`", jsonObj.get("throttlings").toString()));
      }

      JsonArray jsonArraythrottlings = jsonObj.getAsJsonArray("throttlings");
      // validate the required field `throttlings` (array)
      for (int i = 0; i < jsonArraythrottlings.size(); i++) {
        Throttling.validateJsonElement(jsonArraythrottlings.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("role_names") != null && !jsonObj.get("role_names").isJsonNull() && !jsonObj.get("role_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_names` to be an array in the JSON string but got `%s`", jsonObj.get("role_names").toString()));
      }
      if (!jsonObj.get("mapping_endpoint_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapping_endpoint_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapping_endpoint_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointSettings>() {
           @Override
           public void write(JsonWriter out, EndpointSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EndpointSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EndpointSettings
  * @throws IOException if the JSON string is invalid with respect to EndpointSettings
  */
  public static EndpointSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointSettings.class);
  }

 /**
  * Convert an instance of EndpointSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

