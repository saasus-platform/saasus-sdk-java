/*
 * SaaSus Smart API Gateway API Schema
 * SaaSus Smart API Gateway API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package saasus.sdk.apigateway.models;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import saasus.sdk.apigateway.JSON;

/**
 * CreateApiKeyParam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-11T20:38:02.567875254Z[Etc/UTC]")
public class CreateApiKeyParam {
  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_ENV_ID = "env_id";
  @SerializedName(SERIALIZED_NAME_ENV_ID)
  private Integer envId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public CreateApiKeyParam() {
  }

  public CreateApiKeyParam tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * 
   * @return tenantId
   **/
  @javax.annotation.Nonnull
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

  public CreateApiKeyParam envId(Integer envId) {
    this.envId = envId;
    return this;
  }

  /**
   * Get envId
   * 
   * @return envId
   **/
  @javax.annotation.Nonnull
  public Integer getEnvId() {
    return envId;
  }

  public void setEnvId(Integer envId) {
    this.envId = envId;
  }

  public CreateApiKeyParam userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * 
   * @return userId
   **/
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApiKeyParam createApiKeyParam = (CreateApiKeyParam) o;
    return Objects.equals(this.tenantId, createApiKeyParam.tenantId) &&
        Objects.equals(this.envId, createApiKeyParam.envId) &&
        Objects.equals(this.userId, createApiKeyParam.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantId, envId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApiKeyParam {\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    envId: ").append(toIndentedString(envId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tenant_id");
    openapiFields.add("env_id");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tenant_id");
    openapiRequiredFields.add("env_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to
   *                     CreateApiKeyParam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!CreateApiKeyParam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format("The required field(s) %s in CreateApiKeyParam is not found in the empty JSON string",
                CreateApiKeyParam.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!CreateApiKeyParam.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format(
            "The field `%s` in the JSON string is not defined in the `CreateApiKeyParam` properties. JSON: %s",
            entry.getKey(), jsonElement.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON
    // string
    for (String requiredField : CreateApiKeyParam.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s",
            requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("tenant_id").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("tenant_id").toString()));
    }
    if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull())
        && !jsonObj.get("user_id").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("user_id").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!CreateApiKeyParam.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'CreateApiKeyParam' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<CreateApiKeyParam> thisAdapter = gson.getDelegateAdapter(this,
          TypeToken.get(CreateApiKeyParam.class));

      return (TypeAdapter<T>) new TypeAdapter<CreateApiKeyParam>() {
        @Override
        public void write(JsonWriter out, CreateApiKeyParam value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public CreateApiKeyParam read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }

      }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApiKeyParam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApiKeyParam
   * @throws IOException if the JSON string is invalid with respect to
   *                     CreateApiKeyParam
   */
  public static CreateApiKeyParam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApiKeyParam.class);
  }

  /**
   * Convert an instance of CreateApiKeyParam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
