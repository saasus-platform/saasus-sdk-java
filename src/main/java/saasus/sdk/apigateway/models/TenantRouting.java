/*
 * SaaSus Smart API Gateway API Schema
 * SaaSus Smart API Gateway API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package saasus.sdk.apigateway.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import saasus.sdk.apigateway.JSON;

/**
 * Information about tenant routing. Refer to the tenant_routing_type in ApiGatewaySettings and route the request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-11T20:38:02.567875254Z[Etc/UTC]")
public class TenantRouting {
  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_HEADER_KEY = "header_key";
  @SerializedName(SERIALIZED_NAME_HEADER_KEY)
  private String headerKey;

  public static final String SERIALIZED_NAME_HEADER_VALUE = "header_value";
  @SerializedName(SERIALIZED_NAME_HEADER_VALUE)
  private String headerValue;

  public static final String SERIALIZED_NAME_HOST_NAME = "host_name";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public TenantRouting() {
  }

  public TenantRouting path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path for each tenant
   * @return path
  **/
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public TenantRouting headerKey(String headerKey) {
    this.headerKey = headerKey;
    return this;
  }

   /**
   * Header key to specify the tenant identifier
   * @return headerKey
  **/
  @javax.annotation.Nullable
  public String getHeaderKey() {
    return headerKey;
  }

  public void setHeaderKey(String headerKey) {
    this.headerKey = headerKey;
  }


  public TenantRouting headerValue(String headerValue) {
    this.headerValue = headerValue;
    return this;
  }

   /**
   * Tenant identifier set in header key
   * @return headerValue
  **/
  @javax.annotation.Nullable
  public String getHeaderValue() {
    return headerValue;
  }

  public void setHeaderValue(String headerValue) {
    this.headerValue = headerValue;
  }


  public TenantRouting hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

   /**
   * Host Name for each tenant
   * @return hostName
  **/
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantRouting tenantRouting = (TenantRouting) o;
    return Objects.equals(this.path, tenantRouting.path) &&
        Objects.equals(this.headerKey, tenantRouting.headerKey) &&
        Objects.equals(this.headerValue, tenantRouting.headerValue) &&
        Objects.equals(this.hostName, tenantRouting.hostName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, headerKey, headerValue, hostName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantRouting {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    headerKey: ").append(toIndentedString(headerKey)).append("\n");
    sb.append("    headerValue: ").append(toIndentedString(headerValue)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("path");
    openapiFields.add("header_key");
    openapiFields.add("header_value");
    openapiFields.add("host_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TenantRouting
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TenantRouting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TenantRouting is not found in the empty JSON string", TenantRouting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TenantRouting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TenantRouting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("header_key") != null && !jsonObj.get("header_key").isJsonNull()) && !jsonObj.get("header_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_key").toString()));
      }
      if ((jsonObj.get("header_value") != null && !jsonObj.get("header_value").isJsonNull()) && !jsonObj.get("header_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_value").toString()));
      }
      if ((jsonObj.get("host_name") != null && !jsonObj.get("host_name").isJsonNull()) && !jsonObj.get("host_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TenantRouting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TenantRouting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TenantRouting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TenantRouting.class));

       return (TypeAdapter<T>) new TypeAdapter<TenantRouting>() {
           @Override
           public void write(JsonWriter out, TenantRouting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TenantRouting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TenantRouting given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TenantRouting
  * @throws IOException if the JSON string is invalid with respect to TenantRouting
  */
  public static TenantRouting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TenantRouting.class);
  }

 /**
  * Convert an instance of TenantRouting to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

